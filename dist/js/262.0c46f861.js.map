{"version":3,"file":"js/262.0c46f861.js","mappings":"8FAAAA,EAAOC,QAAUC,KAAKC,QAAUD,KAAKC,MAAQC,EAAAA,MAAAA,YAA8BA,EAAQ,M,yFCApE,WAASC,EAAKC,GAAAA,OAC5BA,EAAUA,GAAW,CAAC,EACf,IAAIC,SAAAA,SAAUC,EAASC,GAAAA,IACvBC,EAAU,IAAIC,eACdC,EAAO,GACPC,EAAM,GACNC,EAAU,CAAC,EAEXC,EAAAA,WAAAA,MAAAA,CACLC,GAA8B,IAAzBN,EAAQO,OAAO,IAAI,GACxBC,WAAYR,EAAQQ,WACpBD,OAAQP,EAAQO,OAChBZ,IAAKK,EAAQS,YACbC,KAAM,WAANA,OAAYb,QAAQC,QAAQE,EAAQW,aAAAA,EACpCC,KAAM,WAANA,OAAYf,QAAQC,QAAQE,EAAQW,cAAcE,KAAKC,KAAKC,MAAAA,EAC5DC,KAAM,WAANA,OAAYnB,QAAQC,QAAQ,IAAImB,KAAK,CAACjB,EAAQK,WAAAA,EAC9Ca,MAAOb,EACPD,QAAS,CACRF,KAAM,WAANA,OAAYA,CAAAA,EACZiB,QAAS,WAATA,OAAehB,CAAAA,EACfiB,IAAK,SAAAC,GAAAA,OAAKjB,EAAQiB,EAAEC,cAAAA,EACpBC,IAAK,SAAAF,GAAAA,OAAKA,EAAEC,gBAAiBlB,CAAAA,GAAAA,EAAAA,IAmB1BoB,IAAMC,KAfXzB,EAAQ0B,KAAK9B,EAAQ+B,QAAU,MAAOhC,GAAAA,GAEtCK,EAAQ4B,OAAAA,WACP5B,EAAQ6B,wBAAwBC,QAAQ,yCAAiCC,EAAGC,EAAKC,GAChF/B,EAAKgC,KAAKF,EAAMA,EAAIV,eACpBnB,EAAI+B,KAAK,CAACF,EAAKC,IACf7B,EAAQ4B,GAAO5B,EAAQ4B,GAAU5B,EAAQ4B,GAAAA,IAAQC,EAAUA,CAAAA,IAE5DnC,EAAQO,IAAAA,EAGTL,EAAQmC,QAAUpC,EAElBC,EAAQoC,gBAAuC,WAArBxC,EAAQyC,YAElBzC,EAAQQ,QACvBJ,EAAQsC,iBAAiBb,EAAG7B,EAAQQ,QAAQqB,IAG7CzB,EAAQuC,KAAK3C,EAAQ4C,MAAQ,S","sources":["webpack://indfer/./node_modules/isomorphic-unfetch/browser.js","webpack://indfer/../src/index.mjs"],"sourcesContent":["module.exports = self.fetch || (self.fetch = require('unfetch').default || require('unfetch'));\n","export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(request.responseText).then(JSON.parse),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n"],"names":["module","exports","self","fetch","require","url","options","Promise","resolve","reject","request","XMLHttpRequest","keys","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","then","JSON","parse","blob","Blob","clone","entries","get","n","toLowerCase","has","const","i","open","method","onload","getAllResponseHeaders","replace","m","key","value","push","onerror","withCredentials","credentials","setRequestHeader","send","body"],"sourceRoot":""}